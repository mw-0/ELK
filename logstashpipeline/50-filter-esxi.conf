#
# ESXi Input Configuration

} else if [type] == "esxi" {
        grok {
            break_on_match => true
            match => { "message" => [ "%{SPACE}\<%{DATA:datastore},%{GREEDYDATA}\:%{HOSTNAME} myavglat= %{NUMBER:avglatency:float}, mycount= %{NUMBER:count:int} myoio= %{NUMBER:outstanding_io:float} myws= %{NUMBER:ws:int} mycounter %{NUMBER:counter:int} mybeta= %{NUMBER:beta:float} totalAvgLat = %{NUMBER:total_avg_latency:float}", "%{SPACE}\<%{DATA:datastore},%{GREEDYDATA}avglatency= %{NUMBER:avglatency:float} iops= %{NUMBER:iops:int} threshold= %{NUMBER:threshold:int} Win = %{NUMBER:win:float} ws= %{NUMBER:ws:int} devqdepth= %{NUMBER:qdepth:int} iocount= %{NUMBER:iocount:int} noio= %{NUMBER:noio:float} coio= %{NUMBER:coio:float} totalAvgLat = %{NUMBER:total_avg_latency:float}", "\[%{DATA} %{DATA:syslog_level}\'%{DATA:service}\' opID=%{DATA}\] %{GREEDYDATA:log}", "\[%{DATA} %{DATA:syslog_level} \'%{DATA:service}\'\] %{GREEDYDATA:log}", "%{GREEDYDATA:log}" ] }
        }
        if [avglatency] {
           mutate { add_tag => [ "supported", "SIOC" ] }
        }
        if [log] =~ /(?i)warning|error|fault|ALERT|busy|Failed|[\s]dead|[\s]space|esx\.|vob\.|com\.vmware|nmp|volume|consolidate|FS3|question|ha-eventmgr|VisorFS|Fil3|DLX|MCE|HBX|MPN|swap|mpn|p2m|Reset|timeout|msg\./ and [log] !~ /(?i)crossdup|hostprofiletrace/ {
            if [log] =~ /(?i)vmkwarning/ {
                mutate {
                    add_field => { "alert" => "vmkwarning" }
                }
            }
            if [log] =~ /(?i)ALERT/ {
                mutate {
                    add_field => { "alert" => "ALERT" }
                }
            } else if [log] =~ /(?i)[\s]dead/ {
                mutate {
                    add_field => { "alert" => "dead" }
                }
            } else if [log] =~ /(?i)[\s]space/ and [log] !~ /(?i)Cannot copy memory from user space/ {
                mutate {
                    add_field => { "alert" => "space" }
                }
            } else if [log] =~ /(?i)esx\.problem/ {
                grok {
                    match => {"log" => "(?<esx_problem>esx\.problem\.[a-zA-Z\.]+)" }
                    add_field => { "alert" => "%{esx_problem}" }
                }
            } else  if [log] =~ /(?i)vob\./ {
                grok {
                    match => { "log"=> "(?<vob>vob\.[a-zA-Z\.]+)" }
                    add_field => { "alert" => "%{vob}" }
                }
            } else if [log] =~ /(?i)nmp/ {
                grok {
                    match => { "log"=> "(?<nmp>nmp_[a-zA-Z0-9\-_]+)[:]" }
                    add_field => { "alert" => "%{nmp}" }
                }
            } else if [log] =~ /(?i)Lost access to volume/ {
                grok {
                    match => { "log"=> "(?i)Lost access to volume.*(%{GREEDYDATA:lost_datastore})" }
                    add_field => { "alert" => "Lost access to volume" }
                }
            } else if [log] =~ /(?i)Swap: vm/ {
                mutate { add_field => { "alert" => "swap" }
                }
            } else if [log] =~ /(?i)busy/ and [log] !~ /(?i)crossdup|hostprofiletrace/ {
                 mutate { add_field => { "alert" => "busy" }
                 }
            } else if [log] =~ /(?i)Failed to lock/ {
                mutate { add_field => { "alert" => "failed_to_lock" }
                }
            } else if [log] =~ /(?i)Device or resource busy/ {
                mutate { add_field => { "alert" => "Device_or_resource_busy" }
                }
            } else if [log] =~ /(?i)The file specified is not a virtual disk/ {
                mutate { add_field => { "alert" => "not_a_virtual_disk" }
                }
            } else if [log] =~ /(?i)A fault has occurred causing a virtual CPU to enter the shutdown state/ {
                    mutate { add_field => { "alert" => "vcpu_shutdown_state" }
                    }
            } else if [log] =~ /(?i)The system has rolled back to a previous image/ {
                mutate { add_field => { "alert" => "The_system_has_rolled_back" }
                }
            } else if [log] =~ /(?i)Failed to consolidate/ {
                mutate { add_field => { "alert" => "Failed_to_consolidate" }
                }
            } else if [log] =~ /(?i)needConsolidate is true/ {
                mutate { add_field => { "alert" => "needConsolidate" }
                }
            } else if [log] =~ /(?i)io.latency/  {
                mutate { add_tag => { "alert" => "latency" }
                }
            } else if [log] =~ /(?i)vmodl.fault.ManagedObjectNotFound/ {
               mutate { add_field => { "alert" => "vmodl.fault.ManagedObjectNotFound" } }
            }
        }
        if [log] =~ /Long VMFS3/ {
          grok {
              break_on_match => false
                 match => { "log" => "%{GREEDYDATA} Long VMFS3 rsv time on '%{DATA:Datastore_name}' %{GREEDYDATA} for %{NUMBER:vmfs_rsvtime:float}" }
          }
          if [vmfs_rsvtime] {  mutate { add_tag => [ "supported" ]} }
        }
        if [log] =~ /precopyStunTime/ {
          grok {
              break_on_match => false
                   match => { "log" => "%{GREEDYDATA} precopyStunTime to %{NUMBER:vmotion_precopy:float}" }
          }
          if [vmotion_precopy] {  mutate { add_tag => [ "supported" ]} }
        } 
        if [log] =~ /vmotion result/ {
          grok {
              break_on_match => false
                   match => { "log" => "%{GREEDYDATA} vmotion result has downtime value %{NUMBER:vmotion_downtime:float}" }
          }
          if [vmotion_downtime] {  mutate { add_tag => [ "supported" ]} }
        }
        if [log] =~ /(?i)naa\./ {
           grok {      
               match => { "log" => "(?<canonical_name>naa\.[a-f0-9]+)" }   
           } 
        }
        if [log] =~ /(?i)sense data/ {  
           grok {               
               match => { "log" => "(?<scsi_code>H:[a-f0-9]+x[a-f0-9]+ D:[a-f0-9]+x[a-f0-9]+ P:[a-f0-9]+x[a-f0-9]+).*(?<sense_data>[a-f0-9]+x[a-f0-9]+ [a-f0-9]+x[a-f0-9]+ [a-f0-9]+x[a-f0-9]+)" }
           }
           if [sense_data] != "0x0 0x0 0x0" {
              mutate {
                    add_field => { "alert" => "%{sense_data}" }
                    add_tag => [ "supported" ]
              }
           }
        }
        if [alert] {
            mutate {
                add_tag => "supported"
                remove_field => [ "log" ]
            }
        }    
        if [host] {
            grok { 
                 match => { "host" => "%{DATA}\.%{WORD:Site}" }
            }     
        }
        if [message] =~ /(?i)nonviworkload/ { drop { } }
        if "supported" not in [tags] { drop { }  }
