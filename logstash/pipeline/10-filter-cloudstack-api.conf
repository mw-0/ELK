#
# cloudstack input configuration

filter {
    if  "/var/log/cloudstack/management/apilog.log" in [source] {
        grok {
            break_on_match => false
            match => { "message" => "%{TIMESTAMP_ISO8601:eventdate}%{GREEDYDATA}userId=%{NUMBER:userid}%{SPACE}accountId=%{NUMBER:accountid}%{SPACE}sessionId=%{WORD:sessionid}\)%{GREEDYDATA:apibody}" }
        }
        date {
            match => [ "eventdate", "ISO8601" ]
            target => "@timestamp"
            timezone => "Etc/UTC"
            remove_field => "eventdate"
        }
        grok {
            patterns_dir => [ "/etc/logstash/patterns" ]
            break_on_match => true
            match => { "apibody" => [ "%{GREEDYDATA}%{IPV4}%{SPACE}--%{SPACE}%{WORD}%{SPACE}%{GREEDYDATA:apilog}&_=%{WORD} %{HTTPCODE:statuscode} %{GREEDYDATA:jsonresponse}" , "%{GREEDYDATA}%{IPV4}%{SPACE}--%{SPACE}%{WORD}%{SPACE}%{GREEDYDATA:apilog}&signature=%{DATA} %{HTTPCODE:statuscode} %{GREEDYDATA:jsonresponse}", "%{GREEDYDATA}%{IPV4}%{SPACE}--%{SPACE}%{WORD}%{SPACE}null %{HTTPCODE:statuscode} %{GREEDYDATA:jsonresponse}" ] }
            remove_field => [ "apibody" ]
        }
#        if "_grokparsefailure" in [tags] { drop { } }
        mutate {
            gsub => [ "apilog", "\.", "_",
                      "apilog", "jobId", "jobid",
                      "apilog", "apiKey", "apikey",
                      "apilog", "europe", "Europe",
                      "apilog", "asia", "Asia",
                      "apilog", "america", "America",
                      "jsonresponse", "Message.ReservedCapacityFreed.Flag", "Message_ReservedCapacityFreed_Flag"
                    ]
        }
        urldecode {
            all_fields => false
            field => "apilog"
        }
        kv {
            source => "apilog"
            field_split => "&"
            remove_field => [ "response", "apilog" ]
        }
        if [command] =~ "list" {
            if [statuscode] == "200" {
                mutate {
                    remove_field => [ "jsonresponse", "message" ]
                    add_tag => [ "supported" ]
                }
            } else {
                mutate {
                    remove_field => [ "jsonresponse" ]
                    add_tag => [ "supported" ]
                }
            }
        }
        if [command] == "logout" {
            drop { }
        } else if [command] == "queryAsyncJobResult" {
            mutate {
            remove_field => [ "command" ]
            }
        }
        if [statuscode] == "200" {
            if [jsonresponse] =~ "<?xml" {
                xml {
                    source => "jsonresponse"
                    target => "doc"
                    remove_field => [ "jsonresponse" ]
                    add_tag => [ "xml" ]
                }
                if [doc][queryasyncjobresultresponse] {
                    ruby {
                        code => "event.set('queryasyncjobresultresponse', event.get('[doc][queryasyncjobresultresponse]'))"
                    }
                }
            } else {
                json {
                    source => "jsonresponse"
                    remove_field => [ "jsonresponse" ]
                    add_tag => [ "json" ]
                }
            }
            if [listasyncjobsresponse] {
                drop { }
            }
            if [queryasyncjobresultresponse][cmd] {
                grok {
                    match => { "[queryasyncjobresultresponse][cmd]" => [ "%{WORD:command}$" ] }
                    remove_field => [ "[queryasyncjobresultresponse][cmd]" ]
                }
                mutate {
                            # VirtualMachine USER level
                    gsub => [ "command", "DeployVMCmd", "deployVirtualMachine",
                              "command", "DestroyVMCmd", "destroyVirtualMachine",
                              "command", "RebootVMCmd", "rebootVirtualMachine",
                              "command", "StartVMCmd", "startVirtualMachine",
                              "command", "StopVMCmd", "stopVirtualMachine",
                              "command", "ResetVMPasswordCmd", "resetPasswordForVirtualMachine",
                              "command", "RestoreVMCmd", "restoreVirtualMachine",
                              "command", "ScaleVMCmd", "scaleVirtualMachine",
                              "command", "AddNicToVMCmd", "addNicToVirtualMachine",
                              "command", "RemoveNicFromVMCmd", "removeNicFromVirtualMachine",
                              "command", "UpdateDefaultNicForVMCmd", "updateDefaultNicForVirtualMachine",
                            # VirtualMachine DOMAIN level
                              "command", "ExpungeVMCmd", "expungeVirtualMachine",
                              "command", "AddNicToVMCmd", "addNicToVirtualMachine",
                              "command", "RemoveNicFromVMCmd", "removeNicFromVirtualMachine",
                              "command", "UpdateDefaultNicForVMCmd", "updateDefaultNicForVirtualMachine",
                            # Volume USER level
                              "command", "AttachVolumeCmd", "attachVolume",
                              "command", "UploadVolumeCmd", "uploadVolume",
                              "command", "DetachVolumeCmd", "detachVolume",
                              "command", "CreateVolumeCmd", "createVolume",
                              "command", "ExtractVolumeCmd", "extractVolume",
                              "command", "MigrateVolumeCmd", "migrateVolume",
                              "command", "ResizeVolumeCmd", "resizeVolume",
                            # Snapshots USER level
                              "command", "CreateSnapshotCmd", "createSnapshot",
                              "command", "DeleteSnapshotCmd", "deleteSnapshot",
                              "command", "RevertSnapshotCmd", "revertSnapshot",
                              "command", "CreateVMSnapshotCmd", "createVMSnapshot",
                              "command", "DeleteVMSnapshotCmd", "deleteVMSnapshot",
                              "command", "RevertToVMSnapshotCmd", "revertToVMSnapshot",
                            # ISO USER level
                              "command", "AttachIsoCmd", "attachIso",
                              "command", "DetachIsoCmd", "detachIso",
                              "command", "DeleteIsoCmd", "deleteIso",
                              "command", "CopyIsoCmd", "copyIso",
                              "command", "ExtractIsoCmd", "extractIso",
                            # Template USER level
                              "command", "CreateTemplateCmd", "createTemplate",
                              "command", "CopyTemplateCmd", "copyTemplate",
                              "command", "DeleteTemplateCmd", "deleteTemplate",
                              "command", "ExtractTemplateCmd", "extractTemplate",
                            # Network USER level
                              "command", "DeleteNetworkCmd", "deleteNetwork",
                              "command", "RestartNetworkCmd", "restartNetwork",
                              "command", "UpdateNetworkCmd", "updateNetwork" ]
                }
            }
            if [queryasyncjobresultresponse][jobstatus] {
                if [queryasyncjobresultresponse][jobstatus] == 0 {
                    drop { }
                } else {
                    mutate { add_tag => [ "apiCmdEnd", "kafkaed" ] }
                }
            } else {
                mutate { add_tag => [ "apiCmdStart" ] }
            }
            # VirtualMachine Job responses
            if [queryasyncjobresultresponse][jobid]{
                ruby {
                    code => "event.set('jobid', event.get('[queryasyncjobresultresponse][jobid]'))"
                    remove_field => [ "[queryasyncjobresultresponse][jobid]" ]
                }
            }
            if [deployvirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[deployvirtualmachineresponse][jobid]'))"
                    remove_field => [ "[deployvirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
                if [template] {
                    mutate { rename => { "template" => "template_name" } }
                }
            }
            if [destroyvirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[destroyvirtualmachineresponse][jobid]'))"
                    remove_field => [ "[destroyvirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [rebootvirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[rebootvirtualmachineresponse][jobid]'))"
                    remove_field => [ "[rebootvirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [startvirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[startvirtualmachineresponse][jobid]'))"
                    remove_field => [ "[startvirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [stopvirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[stopvirtualmachineresponse][jobid]'))"
                    remove_field => [ "[stopvirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [resetpasswordforvirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[resetpasswordforvirtualmachineresponse][jobid]'))"
                    remove_field => [ "[resetpasswordforvirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [scalevirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[scalevirtualmachineresponse][jobid]'))"
                    remove_field => [ "[scalevirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [expungevirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[expungevirtualmachineresponse][jobid]'))"
                    remove_field => [ "[expungevirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [command] == "expungeVirtualMachine" { mutate { remove_field => [ "queryasyncjobresultresponse" ] } }
            if [addnictovirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[addnictovirtualmachineresponse][jobid]'))"
                    remove_field => [ "[addnictovirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [removenicfromvirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[removenicfromvirtualmachineresponse][jobid]'))"
                    remove_field => [ "[removenicfromvirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [updatedefaultnicforvirtualmachineresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[updatedefaultnicforvirtualmachineresponse][jobid]'))"
                    remove_field => [ "[updatedefaultnicforvirtualmachineresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [virtualmachine][jobid] {
                ruby { code => "event.set('jobid', event.get('[virtualmachine][jobid]'))" }
            }
            # Volume job responses
            if [attachvolumeresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[attachvolumeresponse][jobid]'))"
                    remove_field => [ "[attachvolumeresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [uploadvolumeresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[uploadvolumeresponse][jobid]'))"
                    remove_field => [ "[uploadvolumeresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [detachvolumeresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[detachvolumeresponse][jobid]'))"
                    remove_field => [ "[detachvolumeresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [createvolumeresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[createvolumeresponse][jobid]'))"
                    remove_field => [ "[createvolumeresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [extractvolumeresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[extractvolumeresponse][jobid]'))"
                    remove_field => [ "[extractvolumeresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [migratevolumeresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[migratevolumeresponse][jobid]'))"
                    remove_field => [ "[migratevolumeresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [resizevolumeresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[resizevolumeresponse][jobid]'))"
                    remove_field => [ "[resizevolumeresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            # Snapshots job responses
            if [createsnapshotresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[createsnapshotresponse][jobid]'))"
                    remove_field => [ "[createsnapshotresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [deletesnapshotresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[deletesnapshotresponse][jobid]'))"
                    remove_field => [ "[deletesnapshotresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [revertsnapshotresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[revertsnapshotresponse][jobid]'))"
                    remove_field => [ "[revertsnapshotresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [createvmsnapshotresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[createvmsnapshotresponse][jobid]'))"
                    remove_field => [ "[createvmsnapshotresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [reverttovmsnapshotresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[reverttovmsnapshotresponse][jobid]'))"
                    remove_field => [ "[reverttovmsnapshotresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            # ISO job responses
            if [attachisoresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[attachisoresponse][jobid]'))"
                    remove_field => [ "[attachisoresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [detachisoresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[detachisoresponse][jobid]'))"
                    remove_field => [ "[detachisoresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [deleteisosresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[deleteisosresponse][jobid]'))"
                    remove_field => [ "[deleteisosresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [copytemplateresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[copytemplateresponse][jobid]'))"
                    remove_field => [ "[copytemplateresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [extractisoresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[extractisoresponse][jobid]'))"
                    remove_field => [ "[extractisoresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            # Template job responses
            if [createtemplateresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[createtemplateresponse][jobid]'))"
                    remove_field => [ "[createtemplateresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [deletetemplateresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[deletetemplateresponse][jobid]'))"
                    remove_field => [ "[deletetemplateresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [extracttemplateresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[extracttemplateresponse][jobid]'))"
                    remove_field => [ "[extracttemplateresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            # Network job responses
            if [deletenetworkresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[deletenetworkresponse][jobid]'))"
                    remove_field => [ "[deletenetworkresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [restartnetworkresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[restartnetworkresponse][jobid]'))"
                    remove_field => [ "[restartnetworkresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [updatenetworkresponse][jobid] {
                ruby {
                    code => "event.set('jobid', event.get('[updatenetworkresponse][jobid]'))"
                    remove_field => [ "[updatenetworkresponse][jobid]" ]
                    add_tag => [ "supported" ]
                }
            }
            if [queryasyncjobresultresponse][jobresult] {
                ruby {
                    code => "event.set('jobresultcode', event.get('[queryasyncjobresultresponse][jobresultcode]'))"
                }
                ruby {
                    code => "event.set('jobstatus', event.get('[queryasyncjobresultresponse][jobstatus]'))"
                }
                ruby {
                    code => "event.set('jobprocstatus', event.get('[queryasyncjobresultresponse][jobprocstatus]'))"
                }
                if [queryasyncjobresultresponse][jobresult][success] {
                    ruby {
                        code => "event.set('success', event.get('[queryasyncjobresultresponse][jobresult][success]'))"
                        add_tag => [ "supported" ]
                    }
                } else if [queryasyncjobresultresponse][jobresult][errorcode] {
                    ruby {
                        code => "event.set('errorcode', event.get('[queryasyncjobresultresponse][jobresult][errorcode]'))"
                        add_tag => [ "supported" ]
                    }
                    ruby {
                        code => "event.set('errortext', event.get('[queryasyncjobresultresponse][jobresult][errortext]'))"
                    }
                }
                if [command] == "destroyVirtualMachine" {
                    mutate { add_tag => [ "supported" ] }
                }
                if [queryasyncjobresultresponse][jobresult][null][jobid] {
                    ruby { code => "event.set('jobid', event.get('[queryasyncjobresultresponse][jobresult][null][jobid]'))" }
                }
                if [queryasyncjobresultresponse][jobresult][virtualmachine] {
                    ruby {
                        code => "event.set('virtualmachine', event.get('[queryasyncjobresultresponse][jobresult][virtualmachine]'))"
                        add_tag => [ "supported" ]
                    }
                } else if [queryasyncjobresultresponse][jobresult][volume] {
                    ruby {
                        code => "event.set('volume', event.get('[queryasyncjobresultresponse][jobresult][volume]'))"
                        add_tag => [ "supported" ]
                    }
                } else if [queryasyncjobresultresponse][jobresult][snapshot] {
                    ruby {
                        code => "event.set('snapshot', event.get('[queryasyncjobresultresponse][jobresult][snapshot]'))"
                        add_tag => [ "supported" ]
                    }
                } else if [queryasyncjobresultresponse][jobresult][iso] {
                    ruby {
                        code => "event.set('iso', event.get('[queryasyncjobresultresponse][jobresult][iso]'))"
                        add_tag => [ "supported" ]
                    }
                } else if [queryasyncjobresultresponse][jobresult][template] {
                    ruby {
                        code => "event.set('template', event.get('[queryasyncjobresultresponse][jobresult][template]'))"
                        add_tag => [ "supported" ]
                    }
                } else if [queryasyncjobresultresponse][jobresult][network] {
                    ruby {
                        code => "event.set('network', event.get('[queryasyncjobresultresponse][jobresult][network]'))"
                        add_tag => [ "supported" ]
                    }
                }
                mutate { remove_field => [ "queryasyncjobresultresponse" ] }
            }
            # VirtualMachine sync jobs
            if [command] == "updateVirtualMachine" {
                ruby {
                    code => "event.set('virtualmachine', event.get('[updatevirtualmachineresponse][virtualmachine]'))"
                    remove_field => [ "updatevirtualmachineresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            if [command] == "changeServiceForVirtualMachine" {
                ruby {
                    code => "event.set('virtualmachine', event.get('[changeserviceforvirtualmachineresponse][virtualmachine]'))"
                    remove_field => [ "changeserviceforvirtualmachineresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            if [command] == "recoverVirtualMachine" {
                ruby {
                    code => "event.set('virtualmachine', event.get('[recovervirtualmachineresponse][virtualmachine]'))"
                    remove_field => [ "recovervirtualmachineresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            # Snapshots sync jobs
            if [command] == "createSnapshotPolicy" {
                ruby {
                    code => "event.set('snapshotpolicy', event.get('[createsnapshotpolicyresponse][snapshotpolicy]'))"
                    remove_field => [ "createsnapshotpolicyresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            if [command] == "deleteSnapshotPolicies" {
                ruby {
                    code => "event.set('success', event.get('[deletesnapshotpoliciesresponse][success]'))"
                    remove_field => [ "deletesnapshotpoliciesresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            # ISO sync jobs
            if [command] == "registerIso" {
                ruby {
                    code => "event.set('iso', event.get('[registerisoresponse][iso]'))"
                    remove_field => [ "registerisoresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            if [command] == "updateIso" {
                ruby {
                    code => "event.set('iso', event.get('[updateisoresponse][iso]'))"
                    remove_field => [ "updateisoresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            if [command] == "updateIsoPermissions" {
                ruby {
                    code => "event.set('success', event.get('[updateisopermissionsresponse][success]'))"
                    remove_field => [ "updateisopermissionsresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            # Template sync jobs
            if [command] == "registerTemplate" {
                ruby {
                    code => "event.set('template', event.get('[registertemplateresponse][template]'))"
                    remove_field => [ "registertemplateresponse" ]
                    add_tag => [ "supported" ]
                }
                if "xml" not in [tags] {
                    split {
                        field => "template"
                    }
                }
            }
            if [command] == "updateTemplate" {
                ruby {
                    code => "event.set('template', event.get('[updatetemplateresponse][template]'))"
                    remove_field => [ "updatetemplateresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            if [command] == "updateTemplatePermissions" {
                ruby {
                    code => "event.set('success', event.get('[updatetemplatepermissionsresponse][success]'))"
                    remove_field => [ "updatetemplatepermissionsresponse" ]
                    add_tag => [ "supported" ]
                }
            }
            # Network sync jobs
            if [createnetworkresponse][network] {
                ruby {
                    code => "event.set('network', event.get('[createnetworkresponse][network]'))"
                    remove_field => [ "createnetworkresponse" ]
                    add_tag => [ "supported" ]
                }
            }
        } else {
            mutate { rename => { "jsonresponse" => "apicmdout" }
                     add_tag => [ "supported" ]
            }
        }
        mutate { remove_field => [ "[beat][version]", "[beat][name]", "offset", "type", "input_type" ] }
#        if "supported" not in [tags] { drop { } }
